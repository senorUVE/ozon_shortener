// Code generated by MockGen. DO NOT EDIT.
// Source: internal/repository/url.go

// Package mocks is a generated GoMock package.
package mocks

import (
	entity "ozon_shortener/internal/repository/entity"
	reflect "reflect"

	gomock "github.com/golang/mock/gomock"
)

// MockUrlQuery is a mock of UrlQuery interface.
type MockUrlQuery struct {
	ctrl     *gomock.Controller
	recorder *MockUrlQueryMockRecorder
}

// MockUrlQueryMockRecorder is the mock recorder for MockUrlQuery.
type MockUrlQueryMockRecorder struct {
	mock *MockUrlQuery
}

// NewMockUrlQuery creates a new mock instance.
func NewMockUrlQuery(ctrl *gomock.Controller) *MockUrlQuery {
	mock := &MockUrlQuery{ctrl: ctrl}
	mock.recorder = &MockUrlQueryMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockUrlQuery) EXPECT() *MockUrlQueryMockRecorder {
	return m.recorder
}

// GetByTokens mocks base method.
func (m *MockUrlQuery) GetByTokens(tokens []string) ([]entity.URL, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetByTokens", tokens)
	ret0, _ := ret[0].([]entity.URL)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetByTokens indicates an expected call of GetByTokens.
func (mr *MockUrlQueryMockRecorder) GetByTokens(tokens interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetByTokens", reflect.TypeOf((*MockUrlQuery)(nil).GetByTokens), tokens)
}

// GetUrlByOriginal mocks base method.
func (m *MockUrlQuery) GetUrlByOriginal(originalUrl string) (entity.URL, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetUrlByOriginal", originalUrl)
	ret0, _ := ret[0].(entity.URL)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetUrlByOriginal indicates an expected call of GetUrlByOriginal.
func (mr *MockUrlQueryMockRecorder) GetUrlByOriginal(originalUrl interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetUrlByOriginal", reflect.TypeOf((*MockUrlQuery)(nil).GetUrlByOriginal), originalUrl)
}

// GetUrlByPK mocks base method.
func (m *MockUrlQuery) GetUrlByPK(id string) (entity.URL, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetUrlByPK", id)
	ret0, _ := ret[0].(entity.URL)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetUrlByPK indicates an expected call of GetUrlByPK.
func (mr *MockUrlQueryMockRecorder) GetUrlByPK(id interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetUrlByPK", reflect.TypeOf((*MockUrlQuery)(nil).GetUrlByPK), id)
}

// GetUrlByToken mocks base method.
func (m *MockUrlQuery) GetUrlByToken(token string) (entity.URL, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetUrlByToken", token)
	ret0, _ := ret[0].(entity.URL)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetUrlByToken indicates an expected call of GetUrlByToken.
func (mr *MockUrlQueryMockRecorder) GetUrlByToken(token interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetUrlByToken", reflect.TypeOf((*MockUrlQuery)(nil).GetUrlByToken), token)
}

// InsertUrl mocks base method.
func (m *MockUrlQuery) InsertUrl(url entity.URL) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "InsertUrl", url)
	ret0, _ := ret[0].(error)
	return ret0
}

// InsertUrl indicates an expected call of InsertUrl.
func (mr *MockUrlQueryMockRecorder) InsertUrl(url interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "InsertUrl", reflect.TypeOf((*MockUrlQuery)(nil).InsertUrl), url)
}

// InsertUrlReturning mocks base method.
func (m *MockUrlQuery) InsertUrlReturning(url entity.URL) (entity.URL, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "InsertUrlReturning", url)
	ret0, _ := ret[0].(entity.URL)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// InsertUrlReturning indicates an expected call of InsertUrlReturning.
func (mr *MockUrlQueryMockRecorder) InsertUrlReturning(url interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "InsertUrlReturning", reflect.TypeOf((*MockUrlQuery)(nil).InsertUrlReturning), url)
}

// UpdateURL mocks base method.
func (m *MockUrlQuery) UpdateURL(url entity.URL) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "UpdateURL", url)
	ret0, _ := ret[0].(error)
	return ret0
}

// UpdateURL indicates an expected call of UpdateURL.
func (mr *MockUrlQueryMockRecorder) UpdateURL(url interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UpdateURL", reflect.TypeOf((*MockUrlQuery)(nil).UpdateURL), url)
}
