// Code generated by MockGen. DO NOT EDIT.
// Source: internal/repository/dao.go

// Package mocks is a generated GoMock package.
package mocks

import (
	context "context"
	dao "ozon_shortener/dao"
	repository "ozon_shortener/internal/repository"
	reflect "reflect"

	gomock "github.com/golang/mock/gomock"
)

// MockDAO is a mock of DAO interface.
type MockDAO struct {
	ctrl     *gomock.Controller
	recorder *MockDAOMockRecorder
}

// MockDAOMockRecorder is the mock recorder for MockDAO.
type MockDAOMockRecorder struct {
	mock *MockDAO
}

// NewMockDAO creates a new mock instance.
func NewMockDAO(ctrl *gomock.Controller) *MockDAO {
	mock := &MockDAO{ctrl: ctrl}
	mock.recorder = &MockDAOMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockDAO) EXPECT() *MockDAOMockRecorder {
	return m.recorder
}

// BeginTx mocks base method.
func (m *MockDAO) BeginTx(ctx context.Context, opts ...dao.TxOption) (context.Context, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{ctx}
	for _, a := range opts {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "BeginTx", varargs...)
	ret0, _ := ret[0].(context.Context)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// BeginTx indicates an expected call of BeginTx.
func (mr *MockDAOMockRecorder) BeginTx(ctx interface{}, opts ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{ctx}, opts...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "BeginTx", reflect.TypeOf((*MockDAO)(nil).BeginTx), varargs...)
}

// CommitTx mocks base method.
func (m *MockDAO) CommitTx(ctx context.Context) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CommitTx", ctx)
	ret0, _ := ret[0].(error)
	return ret0
}

// CommitTx indicates an expected call of CommitTx.
func (mr *MockDAOMockRecorder) CommitTx(ctx interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CommitTx", reflect.TypeOf((*MockDAO)(nil).CommitTx), ctx)
}

// NewRepo mocks base method.
func (m *MockDAO) NewRepo(ctx context.Context, querier dao.BaseQuerySetter) {
	m.ctrl.T.Helper()
	m.ctrl.Call(m, "NewRepo", ctx, querier)
}

// NewRepo indicates an expected call of NewRepo.
func (mr *MockDAOMockRecorder) NewRepo(ctx, querier interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "NewRepo", reflect.TypeOf((*MockDAO)(nil).NewRepo), ctx, querier)
}

// NewUrlQuery mocks base method.
func (m *MockDAO) NewUrlQuery(ctx context.Context) repository.UrlQuery {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "NewUrlQuery", ctx)
	ret0, _ := ret[0].(repository.UrlQuery)
	return ret0
}

// NewUrlQuery indicates an expected call of NewUrlQuery.
func (mr *MockDAOMockRecorder) NewUrlQuery(ctx interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "NewUrlQuery", reflect.TypeOf((*MockDAO)(nil).NewUrlQuery), ctx)
}

// RollbackTx mocks base method.
func (m *MockDAO) RollbackTx(ctx context.Context) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "RollbackTx", ctx)
	ret0, _ := ret[0].(error)
	return ret0
}

// RollbackTx indicates an expected call of RollbackTx.
func (mr *MockDAOMockRecorder) RollbackTx(ctx interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "RollbackTx", reflect.TypeOf((*MockDAO)(nil).RollbackTx), ctx)
}
